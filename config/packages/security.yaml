security:
    # Définition de l'algorithme pour hasher les mots de passe des utilisateurs
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # Définition de la source des utilisateurs
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User # La classe User de l'application
                property: email         # Le champ utilisé pour identifier un utilisateur

    # Configuration des firewalls (zones de sécurité)
    firewalls:
        # Firewall pour l'authentification via JWT
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login       # Point d'entrée pour l'authentification
                username_path: email         # Champ utilisé pour le login
                password_path: password      # Champ utilisé pour le mot de passe
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Firewall pour toutes les routes API
        api:
            pattern: ^/api
            stateless: true
            jwt: ~

        # Firewall pour la déconnexion
        logout:
            pattern: ^/api/logout
            stateless: true

    # Définition des règles d'accès (access_control)
    access_control:
        # Autorisation pour l'authentification (login)
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Restriction : Seuls les administrateurs peuvent accéder aux routes /api/users
        - { path: ^/api/users, roles: ROLE_ADMIN }

        # Permet aux utilisateurs authentifiés (ROLE_USER) d'accéder à leurs propres informations
        - { path: ^/api/users/me$, roles: ROLE_USER }               

        # Autorisation générale : Seuls les utilisateurs authentifiés peuvent accéder aux routes API
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
